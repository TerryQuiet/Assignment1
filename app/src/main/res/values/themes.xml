<resources xmlns:tools="http://schemas.android.com/tools">

    <style name="Theme.MyApp" parent="Base.Theme.MyApp" />
    <!--Base custom theme which will be shared between both light and dark theme variants-->
    <style name="Base.Theme.MyApp" parent="Base.Theme.MaterialThemeBuilder">
        <!--Material color attributes (light theme) -->
        <!--colorPrimary colors map to components and elements, such as app bars and buttons. -->
        <!--colorSecondary colors are most often used as accents on components, such as FABs and -->
        <!--selection controls.-->
        <item name="colorPrimary">@color/primaryColor</item>
        <item name="colorPrimaryVariant">@color/primaryLightColor</item>
        <item name="colorSecondary">@color/primaryColor</item>
        <item name="colorSecondaryVariant">@color/primaryLightColor</item>
        <!--colorBackground appears behind scrollable content and is used for the default window-->
        <!--background. colorSurface is mapped to the surface of components such as cards, sheets-->
        <!--and menus. colorError is used to indicate an error state for components such as-->
        <!--text fields.-->
        <item name="android:windowBackground">@color/backGroundColor</item>
        <item name="android:colorBackground">@color/backGroundColor</item>
        <item name="colorSurface">@android:color/transparent</item>
        <item name="colorError">@color/red_600</item>
        <!--"On" colors define how text, icons and strokes are colored in relation to the surface-->
        <!--on which they appear.-->
        <item name="colorOnPrimary">@color/primaryTextColor</item>
        <item name="colorOnSecondary">@color/primaryTextColor</item>
        <item name="colorOnBackground">@color/white</item>
        <item name="colorOnSurface">@color/white</item>
        <item name="colorOnError">@color/red_200</item>
        <!--Material type attributes-->
        <item name="textAppearanceHeadline1">@style/TextAppearance.MyTheme.Headline1</item>
        <item name="textAppearanceHeadline2">@style/TextAppearance.MyTheme.Headline2</item>
        <item name="textAppearanceHeadline3">@style/TextAppearance.MyTheme.Headline3</item>
        <item name="textAppearanceHeadline4">@style/TextAppearance.MyTheme.Headline4</item>
        <item name="textAppearanceHeadline5">@style/TextAppearance.MyTheme.Headline5</item>
        <item name="textAppearanceHeadline6">@style/TextAppearance.MyTheme.Headline6</item>
        <item name="textAppearanceSubtitle1">@style/TextAppearance.MyTheme.Subtitle1</item>
        <item name="textAppearanceSubtitle2">@style/TextAppearance.MyTheme.Subtitle2</item>
        <item name="textAppearanceBody1">@style/TextAppearance.MyTheme.Body1</item>
        <item name="textAppearanceBody2">@style/TextAppearance.MyTheme.Body2</item>
        <item name="textAppearanceButton">@style/TextAppearance.MyTheme.Button</item>
        <item name="textAppearanceCaption">@style/TextAppearance.MyTheme.Caption</item>
        <item name="textAppearanceOverline">@style/TextAppearance.MyTheme.Overline</item>
        <!--Material shape attributes-->
        <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.MyTheme.SmallComponent
        </item>
        <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.MyTheme.MediumComponent
        </item>
        <item name="shapeAppearanceLargeComponent">@style/ShapeAppearance.MyTheme.LargeComponent
        </item>
        <!--Component styles-->
        <item name="materialAlertDialogTheme">@style/ThemeOverlay.MaterialComponents.Dialog.Alert
        </item>
        <item name="bottomSheetDialogTheme">@style/ThemeOverlay.MyTheme.BottomSheetDialog</item>
        <item name="navigationViewStyle">@style/Widget.MyTheme.NavigationView</item>

        <!--My addiction-->

        <item name="android:windowAnimationStyle">@style/WindowAnimations</item>
        <item name="android:textColor">@color/white</item>
        <!--battery and etc icons background-->
        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimary</item>
        <!--app bar basically-->
        <item name="toolbarStyle">@style/Widget.App.Toolbar</item>

        <item name="snackbarStyle">@style/Widget.App.Snackbar</item>
        <item name="snackbarButtonStyle">@style/Widget.App.SnackbarButton</item>

        <item name="textInputStyle">@style/AppTheme.TextInputLayoutStyle</item>

    </style>

    <style name="Base.Theme.MaterialThemeBuilder" parent="Theme.MaterialComponents.Light.NoActionBar">
        <!--        <item name="android:statusBarColor" tools:ignore="NewApi">?attr/colorSurface</item>
                <item name="android:windowLightStatusBar" tools:ignore="NewApi">true</item>
                <item name="android:navigationBarColor" tools:ignore="NewApi">?android:attr/colorBackground</item>
                <item name="android:windowLightNavigationBar" tools:ignore="NewApi">true</item>-->
        <item name="android:navigationBarDividerColor" tools:ignore="NewApi">
            ?attr/colorControlHighlight
        </item>
    </style>


    <style name="Widget.App.Toolbar" parent="Widget.MaterialComponents.Toolbar.Primary">
        <item name="materialThemeOverlay">@style/ThemeOverlay.App.Toolbar</item>
    </style>

    <style name="ThemeOverlay.App.Toolbar" parent="">
        <item name="backgroundColor">@color/backGroundColor</item>
        <item name="colorPrimary">@color/backGroundColor</item>
        <item name="colorPrimaryVariant">@color/backGroundLightColor</item>
        <item name="colorOnPrimary">@color/primaryTextColor</item>
    </style>


    <style name="AppTheme.TextInputLayoutStyle" parent="Widget.MaterialComponents.TextInputLayout.FilledBox">
        <!-- other props (boxBackgroundMode, boxBackgroundColor, boxStrokeColor, etc) -->
        <!-- can we set editTextStyle from here? Of course not! We should magically know we need a material theme overlay-->
        <item name="materialThemeOverlay">@style/Theme.MyApp.MaterialThemeOverlay</item>
    </style>

    <!-- style inception! a style, child of another style, whose only purpose is to refer to yet another style -->
    <style name="Theme.MyApp.MaterialThemeOverlay">
        <item name="editTextStyle">@style/AppTheme.TextInputEditTextStyle</item>
    </style>

    <!-- finally, the style we SHOULD have been able to set from the theme -->
    <style name="AppTheme.TextInputEditTextStyle" parent="@style/Widget.MaterialComponents.TextInputEditText.FilledBox">
        <item name="android:paddingStart">@dimen/xsmall_4dp</item>
        <item name="android:paddingTop">@dimen/small_8dp</item>
        <item name="android:textColorHint">@color/gray</item>
    </style>


    <style name="Widget.App.Snackbar" parent="Widget.MaterialComponents.Snackbar">
        <item name="materialThemeOverlay">@style/ThemeOverlay.App.Snackbar</item>
        <item name="backgroundOverlayColorAlpha">1</item>
        <item name="android:textColor">@color/white</item>
    </style>

    <style name="Widget.App.SnackbarButton" parent="Widget.MaterialComponents.Button.TextButton.Snackbar">
            <item name="android:textColor">@color/primaryColor</item>
    </style>

    <style name="ThemeOverlay.App.Snackbar" parent="">
        <item name="colorOnSurface">@color/backGroundLightColor</item>
        <item name="android:textColor">@color/white</item>
    </style>


</resources>